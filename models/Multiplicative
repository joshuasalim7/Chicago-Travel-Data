# Multiplicative Model
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error
import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Dense, Input, Multiply, Lambda
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau

# Set random seeds
np.random.seed(42)
tf.random.set_seed(42)

# Load the dataset
file_path = './alldata_downtownTodowntown.csv'
data = pd.read_csv(file_path)
data = data.dropna()

X = data.drop(columns=['total_number_trips', 'Unnamed: 0'])
y = data['total_number_trips'] / 101

# The monotonic features
monotonic_features = ['downtown_downtown', 'EmpDen_Des', 'EmpDen_Ori', 'Commuters_HW', 'Commuters_WH']
monotonic_indices = [X.columns.get_loc(col) for col in monotonic_features]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

target_scaler = StandardScaler()
y_train_scaled = target_scaler.fit_transform(y_train.values.reshape(-1, 1)).flatten()
y_test_scaled = target_scaler.transform(y_test.values.reshape(-1, 1)).flatten()

def monotonicity_regularization(y_pred, X, monotonic_indices):
    violations = tf.constant(0.0)
    batch_size = tf.shape(X)[0]
    
    for idx in monotonic_indices:
        sorted_indices = tf.argsort(X[:, idx])
        sorted_predictions = tf.gather(y_pred, sorted_indices)
        
        # Calculate differences between consecutive predictions
        diffs = sorted_predictions[1:] - sorted_predictions[:-1]
        
        # Penalize negative differences 
        violations += tf.reduce_sum(tf.square(tf.maximum(0.0, -diffs)))
        
        # Add exponential penalty for severe violations
        severe_violations = tf.exp(tf.abs(tf.minimum(diffs, 0.0))) - 1.0
        violations += tf.reduce_sum(severe_violations)
    
    return violations / tf.cast(batch_size, tf.float32)

def custom_loss(lam, monotonic_indices):
    def loss(y_true, y_pred):
        mse = tf.keras.losses.mean_squared_error(y_true, y_pred)
        reg = monotonicity_regularization(y_pred, X_train_scaled, monotonic_indices)
        return mse + lam * reg
    return loss

# Create Multiplicative Model 
def create_multiplicative_model(input_shape, monotonic_indices, lam, learning_rate):
    inputs = Input(shape=(input_shape,))
    feature_layers = []
    for i in range(input_shape):
        feature = Lambda(lambda x: x[:, i:i+1])(inputs)
        contribution = Dense(1, activation='softplus')(feature)
        feature_layers.append(contribution)
    
    if len(feature_layers) > 1:
        output = Multiply()(feature_layers)
    else:
        output = feature_layers[0]
    
    outputs = Dense(1)(output)
    
    model = Model(inputs=inputs, outputs=outputs)
    model.compile(optimizer=Adam(learning_rate=learning_rate), 
                 loss=custom_loss(lam, monotonic_indices))
    return model

def train_and_evaluate(monotonic_indices, lam, batch_size, learning_rate, epochs):
    model = create_multiplicative_model(X_train_scaled.shape[1], 
                                      monotonic_indices, lam, learning_rate)

    early_stopping = EarlyStopping(monitor='val_loss', 
                                 patience=50, 
                                 restore_best_weights=True)
    reduce_lr = ReduceLROnPlateau(monitor='val_loss', 
                                 factor=0.5, 
                                 patience=20, 
                                 min_lr=0.0001)

    history = model.fit(X_train_scaled, y_train_scaled,
                       validation_data=(X_test_scaled, y_test_scaled),
                       epochs=epochs, batch_size=batch_size,
                       callbacks=[early_stopping, reduce_lr], 
                       verbose=0)

    predictions_scaled = model.predict(X_test_scaled)
    predictions = target_scaler.inverse_transform(predictions_scaled)

    mse = mean_squared_error(y_test, predictions)
    
    return mse, model, predictions

# Train baseline model (Î» = 0)
base_mse, base_model, base_predictions = train_and_evaluate(
    [], 0, batch_size=32, learning_rate=0.001, epochs=500)

# lam hyperparameter
lam_values = [0, 0.2, 0.4, 0.6, 0.8, 1.0]
multi_feature_results = []
single_feature_results = {feature: [] for feature in monotonic_features}

for lam in lam_values:
    if lam == 0:
        multi_mse = base_mse
        multi_predictions = base_predictions
    else:
        multi_mse, multi_model, multi_predictions = train_and_evaluate(
            monotonic_indices, lam, batch_size=32, learning_rate=0.001, epochs=500)
    
    multi_feature_results.append({'lam': lam, 'mse': multi_mse})
    
    for feature in monotonic_features:
        single_index = [X.columns.get_loc(feature)]
        if lam == 0:
            single_mse = base_mse
        else:
            single_mse, _, _ = train_and_evaluate(
                single_index, lam, batch_size=32, learning_rate=0.001, epochs=500)
        single_feature_results[feature].append({'lam': lam, 'mse': single_mse})
    
    print(f"Lambda: {lam}")
    print(f"Multi-Feature MSE: {multi_mse}")
    for feature in monotonic_features:
        print(f"{feature} Single-Feature MSE: {single_feature_results[feature][-1]['mse']}")
    print()

# Print Results
print("Multi-Feature Results:")
print(pd.DataFrame(multi_feature_results))

for feature in monotonic_features:
    print(f"\n{feature} Single-Feature Results:")
    print(pd.DataFrame(single_feature_results[feature]))

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, mean_absolute_error, mean_absolute_percentage_error
import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Dense, Input, Conv1D, GlobalAveragePooling1D, Reshape
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau

# ── reproducibility ───────────────────────────────────────────────────────────
np.random.seed(42)
tf.random.set_seed(42)

# ── load & preprocess ─────────────────────────────────────────────────────────
file_path = './synthetic_monotonic_trips.csv'
data = pd.read_csv(file_path).dropna()

# only drop the target column
X = data.drop(columns=['total_number_trips'])
y = data['total_number_trips'] / 101.0

monotonic_features = [
    'downtown_downtown', 'EmpDen_Des', 'EmpDen_Ori',
    'Commuters_HW', 'Commuters_WH'
]
monotonic_indices = [X.columns.get_loc(f) for f in monotonic_features]

# train/test split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# scale features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled  = scaler.transform(X_test)

# scale target
target_scaler = StandardScaler()
y_train_scaled = target_scaler.fit_transform(
    y_train.values.reshape(-1,1)
).flatten()
y_test_scaled  = target_scaler.transform(
    y_test.values.reshape(-1,1)
).flatten()

# ── monotonicity regularization (unchanged) ──────────────────────────────────
def monotonicity_regularization(y_pred, X, monotonic_indices):
    eps = 1e-6
    total_penalty = 0.0
    y_pred = tf.reshape(y_pred, [-1])
    current_batch_size = tf.shape(y_pred)[0]

    if not isinstance(X, tf.Tensor):
        X = tf.convert_to_tensor(X, dtype=tf.float32)
    X = tf.slice(X, [0,0], [current_batch_size, tf.shape(X)[1]])

    for idx in monotonic_indices:
        x_unsorted = tf.cast(X[:, idx], tf.float32)
        mean_x = tf.reduce_mean(x_unsorted)
        mean_f = tf.reduce_mean(y_pred)
        cov = tf.reduce_mean(x_unsorted * y_pred) - mean_x * mean_f
        var = tf.reduce_mean(tf.square(x_unsorted)) - tf.square(mean_x) + eps
        a = cov / var
        b = mean_f - a * mean_x

        sorted_idx = tf.argsort(y_pred)
        y_sorted   = tf.gather(y_pred, sorted_idx)
        x_sorted   = tf.gather(x_unsorted, sorted_idx)

        y_lin      = a * x_sorted + b
        diff_y     = y_sorted[1:] - y_sorted[:-1]
        diff_y_lin = y_lin[1:]    - y_lin[:-1]

        violation = tf.maximum(0.0, diff_y_lin - diff_y)
        total_penalty += tf.reduce_sum(tf.square(violation))

    return total_penalty / tf.cast(current_batch_size, tf.float32)

def custom_loss(lam, monotonic_indices):
    def loss(y_true, y_pred):
        mse = tf.keras.losses.mean_squared_error(y_true, y_pred)
        reg = monotonicity_regularization(y_pred, X_train_scaled, monotonic_indices)
        return mse + lam * reg
    return loss

# ── CNN model factory (unchanged) ─────────────────────────────────────────────
def create_model(input_shape, monotonic_indices, lam, learning_rate):
    inputs = Input(shape=(input_shape,))
    x = Reshape((input_shape,1))(inputs)
    x = Conv1D(64, 3, activation='relu', padding='same')(x)
    x = Conv1D(32,  3, activation='relu', padding='same')(x)
    x = Conv1D(16,  3, activation='relu', padding='same')(x)
    x = GlobalAveragePooling1D()(x)
    outputs = Dense(1)(x)

    model = Model(inputs=inputs, outputs=outputs)
    model.compile(
        optimizer=Adam(learning_rate=learning_rate),
        loss=custom_loss(lam, monotonic_indices)
    )
    return model

def train_and_evaluate(monotonic_indices, lam, batch_size, learning_rate, epochs):
    model = create_model(
        X_train_scaled.shape[1], monotonic_indices, lam, learning_rate
    )
    es = EarlyStopping(monitor='val_loss', patience=50, restore_best_weights=True)
    rl = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=20, min_lr=1e-4)

    model.fit(
        X_train_scaled, y_train_scaled,
        validation_data=(X_test_scaled, y_test_scaled),
        epochs=epochs, batch_size=batch_size,
        callbacks=[es, rl], verbose=0
    )

    pred_scaled = model.predict(X_test_scaled)
    # flatten before metrics
    predictions = target_scaler.inverse_transform(pred_scaled).flatten()

    mse  = mean_squared_error(y_test, predictions)
    mae  = mean_absolute_error(y_test, predictions)
    mape = mean_absolute_percentage_error(y_test, predictions)
    return mse, mae, mape, model, predictions

# ── run experiments: multi- & single-feature ─────────────────────────────────
# 1) train base (λ = 0)
base_mse, base_mae, base_mape, base_model, base_preds = train_and_evaluate(
    monotonic_indices, 0.0, batch_size=32, learning_rate=1e-3, epochs=500
)

# 2) prepare result containers
lam_values = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]
multi_feature_results = []
single_feature_results = {feat: [] for feat in monotonic_features}

# 3) loop over lambdas
for lam in lam_values:
    if lam == 0.0:
        mse_, mae_, mape_, preds_ = base_mse, base_mae, base_mape, base_preds
    else:
        mse_, mae_, mape_, _, preds_ = train_and_evaluate(
            monotonic_indices, lam, batch_size=32, learning_rate=1e-3, epochs=500
        )

    # record multi-feature
    multi_feature_results.append({
        'lam': lam,
        'mse': mse_,
        'mae': mae_,
        'mape': mape_
    })

    # record each single feature in isolation
    for feat in monotonic_features:
        print("check")
        idx = [X.columns.get_loc(feat)]
        if lam == 0.0:
            smse, smae, smape = base_mse, base_mae, base_mape
        else:
            smse, smae, smape, _, _ = train_and_evaluate(
                idx, lam, batch_size=32, learning_rate=1e-3, epochs=500
            )
        single_feature_results[feat].append({
            'lam': lam,
            'mse': smse,
            'mae': smae,
            'mape': smape
        })

# 4) display results
print("\nMulti-Feature Results:")
print(pd.DataFrame(multi_feature_results))

for feat in monotonic_features:
    print(f"\n{feat} Single-Feature Results:")
    print(pd.DataFrame(single_feature_results[feat]))

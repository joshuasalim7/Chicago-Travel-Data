import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, mean_absolute_error, mean_absolute_percentage_error
import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Dense, Input
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau

# reproducibility
np.random.seed(42)
tf.random.set_seed(42)

# --- load & preprocess ---
file_path = './synthetic_monotonic_trips.csv'
data = pd.read_csv(file_path).dropna()

# features / target
X = data.drop(columns=['total_number_trips'])
y = data['total_number_trips'] / 101.0

monotonic_features = ['downtown_downtown', 'EmpDen_Des', 'EmpDen_Ori',
                      'Commuters_HW', 'Commuters_WH']
monotonic_indices = [X.columns.get_loc(col) for col in monotonic_features]

# train/test split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# standardize features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled  = scaler.transform(X_test)

# standardize target
target_scaler = StandardScaler()
y_train_scaled = target_scaler.fit_transform(y_train.values.reshape(-1,1)).flatten()
y_test_scaled  = target_scaler.transform(y_test.values.reshape(-1,1)).flatten()

# ----------------------------------------------------------------
# improved monotonicity regularization
# ----------------------------------------------------------------
def monotonicity_regularization(y_pred, X_full, monotonic_indices):
    """
    For each monotonic feature, compute the 1-step sorted violation,
    then return the average squared violation per feature.
    """
    # guard against empty list of features
    if not monotonic_indices:
        return tf.constant(0.0, dtype=tf.float32)

    eps = 1e-6
    # ensure y_pred is 1D
    y_pred = tf.reshape(y_pred, [-1])
    batch_size = tf.shape(y_pred)[0]

    # get the batch's X values
    X_batch = tf.convert_to_tensor(X_full, dtype=tf.float32)
    X_batch = tf.slice(X_batch, [0,0], [batch_size, tf.shape(X_batch)[1]])

    penalties = []
    for idx in monotonic_indices:
        x_feat = X_batch[:, idx]
        # sort by the model's prediction
        order    = tf.argsort(y_pred)
        x_sorted = tf.gather(x_feat,  order)
        y_sorted = tf.gather(y_pred,   order)

        # compute adjacent diffs
        delta_x = x_sorted[1:] - x_sorted[:-1] + eps
        delta_y = y_sorted[1:] - y_sorted[:-1]

        # baseline slope from unsorted data
        mean_x = tf.reduce_mean(x_feat)
        mean_y = tf.reduce_mean(y_pred)
        cov    = tf.reduce_mean((x_feat - mean_x) * (y_pred - mean_y))
        var    = tf.reduce_mean(tf.square(x_feat - mean_x)) + eps
        a      = cov / var
        b      = mean_y - a * mean_x

        # expected Δy = a·Δx
        expected  = a * delta_x

        # violation = max(0, expected - actual)
        violation = tf.nn.relu(expected - delta_y)
        penalties.append(tf.reduce_mean(tf.square(violation)))

    # average penalty across features
    return tf.add_n(penalties) / tf.cast(len(monotonic_indices), tf.float32)

def custom_loss(lam, monotonic_indices):
    def loss(y_true, y_pred):
        mse = tf.keras.losses.mean_squared_error(y_true, y_pred)
        reg = monotonicity_regularization(y_pred, X_train_scaled, monotonic_indices)
        return mse + lam * reg
    return loss

# ----------------------------------------------------------------
# model factory (unchanged)
# ----------------------------------------------------------------
def create_model(input_shape, monotonic_indices, lam, learning_rate):
    inputs = Input(shape=(input_shape,))
    x = Dense(32, activation='relu')(inputs)
    outputs = Dense(1)(x)
    model = Model(inputs=inputs, outputs=outputs)
    model.compile(
        optimizer=Adam(learning_rate=learning_rate),
        loss=custom_loss(lam, monotonic_indices)
    )
    return model

def train_and_evaluate(monotonic_indices, lam, batch_size, learning_rate, epochs):
    model = create_model(X_train_scaled.shape[1], monotonic_indices, lam, learning_rate)
    early_stopping = EarlyStopping(monitor='val_loss', patience=50, restore_best_weights=True)
    reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=20, min_lr=1e-4)

    model.fit(
        X_train_scaled, y_train_scaled,
        validation_data=(X_test_scaled, y_test_scaled),
        epochs=epochs, batch_size=batch_size,
        callbacks=[early_stopping, reduce_lr],
        verbose=0
    )

    pred_scaled = model.predict(X_test_scaled)
    predictions = target_scaler.inverse_transform(pred_scaled).flatten()

    mse  = mean_squared_error(y_test, predictions)
    mae  = mean_absolute_error(y_test, predictions)
    mape = mean_absolute_percentage_error(y_test, predictions)
    return mse, mae, mape, model, predictions

# ----------------------------------------------------------------
# run experiments: multi- & single-feature
# ----------------------------------------------------------------
# first, train base (λ = 0)
base_mse, base_mae, base_mape, base_model, base_predictions = train_and_evaluate(
    [], 0.0, batch_size=32, learning_rate=1e-3, epochs=500
)

# set up containers
lam_values = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]
multi_feature_results = []
single_feature_results = {feat: [] for feat in monotonic_features}

for lam in lam_values:
    if lam == 0.0:
        mse_, mae_, mape_, preds_ = base_mse, base_mae, base_mape, base_predictions
    else:
        mse_, mae_, mape_, _, preds_ = train_and_evaluate(
            monotonic_indices, lam, 32, 1e-3, 500
        )

    # record multi‐feature
    multi_feature_results.append({
        'lam': lam,
        'mse': mse_,
        'mae': mae_,
        'mape': mape_
    })

    # now each single feature in isolation
    for feat in monotonic_features:
        print("check")
        idx = [X.columns.get_loc(feat)]
        if lam == 0.0:
            smse, smae, smape = base_mse, base_mae, base_mape
        else:
            smse, smae, smape, _, _ = train_and_evaluate(
                idx, lam, 32, 1e-3, 500
            )
        single_feature_results[feat].append({
            'lam': lam,
            'mse': smse,
            'mae': smae,
            'mape': smape
        })

# display
print("\nMulti-Feature Results:")
print(pd.DataFrame(multi_feature_results))

for feat in monotonic_features:
    print(f"\n{feat} Single-Feature Results:")
    print(pd.DataFrame(single_feature_results[feat]))
